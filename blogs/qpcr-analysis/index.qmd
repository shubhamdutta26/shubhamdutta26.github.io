---
title: "Real time qPCR data analysis using R"
author: "Shubham Dutta"
date: "2023-03-17"
categories: [qpcr, sybr green, r, tidyverse]
draft: true
#image: "taqman.png"
---

### Introduction

I will be using the [Tidyverse](https://www.tidyverse.org/) package in R to analyse and plot a simple RT-qPCR experiment data. In this experiment, I have ectopically-expressed two proteins namely NKG2A and NKG2C (along with their binding partner CD94) in HEK293 cells. I want to assess the expression status of these genes in the HEK293 cells relative to GAPDH using the $\Delta$$\Delta$C~T~ method. The experiment was run in a [C1000 Touch Thermal Cycler](https://www.bio-rad.com/en-us/product/c1000-touch-thermal-cycler?ID=LGTW9415) instrument. The csv file can be found [here](https://github.com/shubhamdutta26/qPCR-data-analysis-R/blob/main/qPCR_HEKs_OE_NKG2A-C_human.csv).

### The $\Delta$$\Delta$C~T~ method for gene expression analysis

The $\Delta$$\Delta$C~T~ method (also known as the 2^--∆∆C~T~^ method) is a simple formula used to calculate the relative fold gene expression of samples when performing RT-qPCR. The method was developed by Kenneth Livak and Thomas Schmittgen in 2001 and is widely used ([Livak & Schmittgen, 2001](https://doi.org/10.1006/meth.2001.1262)).

C~T~ (or C~Q~) stands for the Cycle Threshold (or Cycle Quantification) of a sample. This is given after the qPCR reaction by the software. Simply put, it is the cycle number where the fluorescence generated by the PCR product is distinguishable from the background fluorescence signal.

*The symbol* $\Delta$ (Delta) is a mathematical term used to describe the difference between two values.

Let's see how we can calculate the $\Delta$$\Delta$C~T~:

> $\Delta$$\Delta$C~T~ = $\Delta$C~T~ (treated sample) -- $\Delta$C~T~ (untreated sample)

Essentially, $\Delta$$\Delta$C~T~ is the difference between the $\Delta$C~T~ values of the treated/experimental sample and the untreated/control sample. But what does $\Delta$C~T~ refer to?

> $\Delta$C~T~ = C~T~ (gene of interest) -- C~T~ (housekeeping gene)

Basically, $\Delta$C~T~ is the difference in $\Delta$C~T~ values for your gene of interest and your housekeeping gene for a given sample. This is to essentially normalise the gene of interest to a gene which is not affected by your experiment.

Finally, to work out the fold gene expression (F~C~) we need to do 2 to the power of negative $\Delta$$\Delta$C~T~:

> F~C~ = 2^--^$\Delta$$\Delta$C~T~

Let us move to the fun part now!

### Data Analysis

#### Install and load Tidyverse package

We will use the [Tidyverse](https://www.tidyverse.org/) package for the data analysis.

Load the `tidyverse` and `readr` packages into R Studio environment:

```{r error=FALSE, warning=FALSE, message=FALSE}
library(tidyverse)
library(readr)
library(janitor)
```

#### Importing the data

Now we will import the qPCR data (a csv document in this case) into the R Studio environment using the `read.csv` function and store it as a dataframe (df) called **qpcr**.<br>

```{r}
qpcr <- read_csv("qPCR_HEKs_OE_NKG2A-C_human.csv") %>% clean_names()
tibble(qpcr)
```

There are 15 columns (variables) in our data but we only need a some them for our data analysis. Therefore, using the `select` function we will extract the columns we need and store them in a new df called **tidyData**.

```{r}
tidyData <- qpcr %>% select(target:cq, -content)
glimpse(tidyData)
```

Lets look at the 4 columns now:

-   **target**: This variable stores the different target genes which in this case are GAPDH, NKG2A, NKG2B, and CD94.
-   **sample**: These are different biological replicates. There are 5 replicates. There are no technical replicates for this experiment.
-   **biological_set_name**: This variable stores the three different conditions. HEK cells are transfected with empty vector (empty vector), NKG2A/ CD94 (pcDNA-NKG2A), and NKG2C/ CD94 (pcDNA-NKG2C).
-   \*\*cq\*: The C~q~ (or C~T~) value for each condition. From here on till the end I will be using C~T~ and C~Q~ interchangeably.

<br>

#### Calculate $\Delta$C~T~

The $\Delta$C~T~ is the differnce between the C~T~ of the housekeeping gene and the target gene. To calculate $\Delta$C~T~ we need to determine the average C~T~ of GAPDH for three conditions (empty vector, pcDNA-NKG2A, and pcDNA-NKG2C).

We will use the `filter` function to extract and store the C~T~ values of GAPDH in a new df called **gapdh_only**. Then we will use the `group_by`, `summarise`, and `mean()` functions to calculate mean C~T~s for the three conditions and store the values in another df called **avg_gapdh**.

`%>%` is called the pipe operator. This special operational function available under the [magrittr](https://cran.r-project.org/web/packages/magrittr/vignettes/magrittr.html) and [dplyr](https://dplyr.tidyverse.org/) package (basically developed under magrittr), which allows us to pass the result of one function/argument to the other one in sequence.

```{r}
gapdh_only <- tidyData %>%
  filter(target == "GAPDH")

avg_gapdh <- gapdh_only %>% 
  group_by(biological_set_name) %>% 
  summarize(ref_cq = mean(cq))

avg_gapdh
```

We have stored the mean GAPDH C~T~ value as *ref_cq*. We will subtract the *ref_cq* from the *cq* of the other target genes. Let's take *NKG2A* as an example and see a step-by-step process:

First, we will extract the NKG2A target gene data for all the conditions and store it in *nkg2a_only* df.

```{r}
nkg2a_only <- tidyData %>% filter(target == "NKG2A")
head(nkg2a_only)
```

Second, we will join the *avg_gapdh* & *nkg2a_only* dfs using `left_join`:

```{r}
nkg2a_gapdh <- left_join(nkg2a_only, avg_gapdh, by = "biological_set_name")
head(nkg2a_gapdh)
```

Finally, we will calculate the $\Delta$C~T~ for the NKG2A dataset and store the values in *nkg2a_gapdh* df. The `mutate` function basically calculates *del_cq* values and adds a new column (variable) to the existing df.

```{r}
nkg2a_gapdh <- nkg2a_gapdh %>% mutate(del_cq = cq - ref_cq)
head(nkg2a_gapdh)
```

Please feel free to use the dataset to calculate the $\Delta$C~T~ for NKG2C and CD94 genes.

#### Calculate $\Delta$$\Delta$C~T~

The $\Delta$$\Delta$C~T~ is the difference between the $\Delta$C~T~ values of experimental sample and the control sample.

First, we calculate mean C~T~ for "empty vector" from *nkg2a_gapdh* df and store it in the **nkg2a_empty** variable.

```{r}
nkg2a_empty <- nkg2a_gapdh %>% filter(biological_set_name == "empty vector") %>% summarise(mean_empty = mean(del_cq)) %>% pull(mean_empty)
nkg2a_empty
```

Second, we calculate the $\Delta$$\Delta$C~T~ values and append the values to *nkg2a_gapdh* df.

```{r}
nkg2a_gapdh <- nkg2a_gapdh %>% mutate(del_del_cq = del_cq - nkg2a_empty)
head(nkg2a_gapdh)
```

Next, we can calculate the fold change gene expression for each condition using the F~C~ formula above.

```{r}
nkg2a_geneExp <- nkg2a_gapdh %>% mutate(geneExp = 2^(del_del_cq))
head(nkg2a_geneExp)
```

Finally, let us calculate statistical parameters using `mean()` and `sd()` for the data:

```{r}
nkg2a_geneExp_final <- nkg2a_geneExp %>% group_by(biological_set_name) %>% summarise(mean_geneExp = mean(geneExp), sd_geneExp = sd(geneExp)) %>% mutate(Target = c("NKG2A", "NKG2A", "NKG2A"))
head(nkg2a_geneExp_final)
```

Please feel free to use the dataset to calculate the $\Delta$$\Delta$C~T~ for NKG2C and CD94 genes.

Lets move on to the visualization of our data.

```{r echo=FALSE, fig.show='hide'}
### NKG2C start
# Get all NKG2C values for all three conditions
nkg2c_only <- tidyData %>% filter(target == "NKG2C")
# join avg_gapdh with nkg2c_only to a new df named "nkg2c_gapdh"
nkg2c_gapdh <- left_join(nkg2c_only, avg_gapdh, by = "biological_set_name")
# calculate del_cq for nkg2c
nkg2c_gapdh <- nkg2c_gapdh %>% mutate(del_cq = ref_cq - cq)
# Extract empty vector information from nkg2c_gapdh
nkg2c_empty <- nkg2c_gapdh %>% filter(biological_set_name == "empty vector") %>% summarise(mean_empty = mean(del_cq)) %>% pull(mean_empty)
#Calculate del_del_cq for nkg2c_gapdh
nkg2c_gapdh <- nkg2c_gapdh %>% mutate(del_del_cq = del_cq - nkg2c_empty)
# Calculate gene expression data for nkg2c data
nkg2c_geneExp <- nkg2c_gapdh %>% mutate(geneExp = 2^(del_del_cq))
# Calculte statistical parameters
nkg2c_geneExp_final <- nkg2c_geneExp %>% group_by(biological_set_name) %>% summarise(mean_geneExp = mean(geneExp), sd_geneExp = sd(geneExp)) %>% mutate(target = c("NKG2C", "NKG2C", "NKG2C"))
# Plot
nkg2c_plot <- ggplot(nkg2c_geneExp_final, aes(x = biological_set_name, y = mean_geneExp))+
  geom_bar(stat = "identity")+
  geom_errorbar(aes(ymin = mean_geneExp - sd_geneExp, ymax = mean_geneExp + sd_geneExp), width=.2)
nkg2c_plot
### NKG2C end
### CD94 start
# Get all CD94 values for all three conditions
cd94_only <- tidyData %>% filter(target == "CD94")
# join avg_gapdh with cd94_only to a new df named "cd94_gapdh"
cd94_gapdh <- left_join(cd94_only, avg_gapdh, by = "biological_set_name")
# calculate del_cq for cd94
cd94_gapdh <- cd94_gapdh %>% mutate(del_cq = ref_cq - cq)
# Extract empty vector information from cd94_gapdh
cd94_empty <- cd94_gapdh %>% filter(biological_set_name == "empty vector") %>% summarise(mean_empty = mean(del_cq)) %>% pull(mean_empty)
#Calculate del_del_cq for cd94_gapdh
cd94_gapdh <- cd94_gapdh %>% mutate(del_del_cq = del_cq - cd94_empty)
# Calculate gene expression data for cd94 data
cd94_geneExp <- cd94_gapdh %>% mutate(geneExp = 2^(del_del_cq))
# Calculte statistical parameters
cd94_geneExp_final <- cd94_geneExp %>% group_by(biological_set_name) %>% summarise(mean_geneExp = mean(geneExp), sd_geneExp = sd(geneExp)) %>% mutate(target = c("CD94", "CD94", "CD94"))
# Plot
cd94_plot <- ggplot(cd94_geneExp_final, aes(x = biological_set_name, y = mean_geneExp))+
  geom_bar(stat = "identity")+
  geom_errorbar(aes(ymin = mean_geneExp - sd_geneExp, ymax = mean_geneExp + sd_geneExp), width=.2)
cd94_plot
### CD94 end
```

### Data Visualization

Before plotting the data let us make a single df. We will use `full_join` to accomplish this and make a new df called **all** which contains the analysis for individual targets namely NKG2C (**nkg2c_geneExp_final**) and CD94 (**cd94_geneExp_final**).

```{r error=FALSE, warning=FALSE, message=FALSE}
all <- full_join(nkg2a_geneExp_final, nkg2c_geneExp_final)
all <- full_join(all, cd94_geneExp_final)
```

```{r}
all
```

Let us now use `ggplot` package to plot a bar plot for the RT-qPCR data.

```{r}
ggplot(all, aes(x = biological_set_name, y = mean_geneExp, fill = target)) +
  geom_bar(stat = "identity", width = 0.5, position = position_dodge(0.6), color = "#434343") +
  geom_errorbar(aes(ymin = mean_geneExp - sd_geneExp, ymax = mean_geneExp + sd_geneExp), width=.2, position = position_dodge(0.6)) +
  theme_bw()+
  labs(title = "Human NKG2A/C-CD94 overexpression status in HEK293 cells",
       subtitle = "2021.11.23 Shubham Dutta",
       x = "Transfection (Human genes)",
       y = "Expression relative to GAPDH",
       fill = "Target gene",
       caption = NULL)+
  theme(plot.title=element_text(size=13),
        axis.text=element_text(size=12, color = "#434343"),
        axis.title=element_text(size=13),
        legend.text=element_text(size=10),
        legend.title=element_text(size=12),
        legend.position = c(0.2, 0.8),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank())+
  scale_fill_manual(values = c("#d55e00", "#0072b2", "#009e73")) +
  scale_y_continuous(expand = expansion(mult = c(0, .1)))
```

### References

1.  Kenneth J. Livak, Thomas D. Schmittgen, Analysis of Relative Gene Expression Data Using Real-Time Quantitative PCR and the 2−ΔΔCT Method, Methods, Volume 25, Issue 4, 2001, Pages 402-408, ISSN 1046-2023, https://doi.org/10.1006/meth.2001.1262.

<br><br>
